--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[3] = table.create(256)
Queue.Unreliable[0] = table.create(256)
Queue.Unreliable[1] = table.create(256)
local function ReadEVENT_SetCharacter(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function ReadEVENT_CastAbility(): ({ AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 })
	-- Read BLOCK: 28 bytes
	local BLOCK_START = Read(28)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.AbilityName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.CharacterName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	RecieveInstanceCursor += 1
	Value.PlayerCaster = RecieveInstances[RecieveInstanceCursor]
	if typeof(Value.PlayerCaster) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.PlayerCaster)} instead.`) end
	if not Value.PlayerCaster:IsA("Player") then error(`Expected an Instance of type "Player", got "{Value.PlayerCaster.ClassName}" instead.`) end
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	Value.Direction = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 24)
	Value.Position = Vector3.new(X, Y, Z)
	return Value
end

local function ReadEVENT_StartCharacterAnimation(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value = buffer.readstring(RecieveBuffer, Read(Length), Length)
	return Value
end

local function ReadEVENT_TargetChanged(): (Model?)
	local Value
	RecieveInstanceCursor += 1
	if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
		RecieveInstanceCursor -= 1
		RecieveInstanceCursor += 1
		Value = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value) ~= "Instance" then error(`Expected an Instance, got {typeof(Value)} instead.`) end
		if not Value:IsA("Model") then error(`Expected an Instance of type "Model", got "{Value.ClassName}" instead.`) end
	end
	return Value
end

local function ReadEVENT_UpdateCharacterState(): ({ CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean })
	-- Read BLOCK: 6 bytes
	local BLOCK_START = Read(6)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.CharacterName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Health = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Value.Health < 0 then error(`Expected "Value.Health" to be larger than 0, got {Value.Health} instead.`) end
	if Value.Health > 100 then error(`Expected "Value.Health" to be smaller than 100, got {Value.Health} instead.`) end
	Value.Mana = buffer.readu8(RecieveBuffer, BLOCK_START + 3)
	if Value.Mana < 0 then error(`Expected "Value.Mana" to be larger than 0, got {Value.Mana} instead.`) end
	if Value.Mana > 100 then error(`Expected "Value.Mana" to be smaller than 100, got {Value.Mana} instead.`) end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 12 bytes
		local BLOCK_START = Read(12)
		local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
		local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
		local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
		Value.Position = Vector3.new(X, Y, Z)
	end
	Value.IsAlive = (buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1)
	return Value
end

local function WriteEVENT_ClientInputEvent(Value: { KeyCode: string, UserInputType: string, IsPressed: boolean }): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	local Length = #Value.KeyCode
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.KeyCode, Length)
	local Length = #Value.UserInputType
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.UserInputType, Length)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.IsPressed and 1 or 0)
end

local function WriteEVENT_SetTarget(Value: Model?): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	table.insert(SendInstances, Value or Null)
end

local function WriteEVENT_RequestAbilityCast(Value: { AbilityId: number, Target: Model?, Position: Vector3 }): ()
	-- Allocate BLOCK: 15 bytes
	local BLOCK_START = Allocate(15)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 6)
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Value.AbilityId)
	table.insert(SendInstances, Value.Target or Null)
	local Vector = Value.Position
	buffer.writef32(SendBuffer, BLOCK_START + 3, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 7, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 11, Vector.Z)
end

local function ReadEVENT_stateSync(): ({ States: {[string]: any} })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Value = {} :: any
	Value.States = {}
	local Elements_1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	for _ = 1, Elements_1 do
		local OFFSET_0 = Read(2)
		local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
		local Key_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		RecieveInstanceCursor += 1
		local Element_1 = RecieveInstances[RecieveInstanceCursor]
		Value.States[Key_1] = Element_1
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	SetCharacter = {
		On = NOOP
	},
	CastAbility = {
		On = NOOP
	},
	StartCharacterAnimation = {
		On = NOOP
	},
	TargetChanged = {
		On = NOOP
	},
	UpdateCharacterState = {
		On = NOOP
	},
	ClientInputEvent = {
		Fire = NOOP
	},
	SetTarget = {
		Fire = NOOP
	},
	RequestAbilityCast = {
		Fire = NOOP
	},
	stateSync = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: string = ReadEVENT_SetCharacter()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"SetCharacter\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 } = ReadEVENT_CastAbility()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"CastAbility\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: string = ReadEVENT_StartCharacterAnimation()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"StartCharacterAnimation\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 3 then
			local Value: Model? = ReadEVENT_TargetChanged()
			if Events.Reliable[3] ~= nil then
				Events.Reliable[3](Value)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"TargetChanged\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean } = ReadEVENT_UpdateCharacterState()
			if Events.Unreliable[0] ~= nil then
				Events.Unreliable[0](Value)
			end
		elseif Index == 1 then
			local Value: { States: {[string]: any} } = ReadEVENT_stateSync()
			if Events.Unreliable[1] ~= nil then
				task.spawn(Events.Unreliable[1], Value)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	SetCharacter = {
		On = function(Listener: (Value: string) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				if Events.Reliable[0] == Listener then
					Events.Reliable[0] = nil
				end
			end
		end
	},
	CastAbility = {
		On = function(Listener: (Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				if Events.Reliable[1] == Listener then
					Events.Reliable[1] = nil
				end
			end
		end
	},
	StartCharacterAnimation = {
		On = function(Listener: (Value: string) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				if Events.Reliable[2] == Listener then
					Events.Reliable[2] = nil
				end
			end
		end
	},
	TargetChanged = {
		On = function(Listener: (Value: Model?) -> ()): () -> ()
			Events.Reliable[3] = Listener
			for Index, Arguments in Queue.Reliable[3] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[3] = {}
			return function (): ()
				if Events.Reliable[3] == Listener then
					Events.Reliable[3] = nil
				end
			end
		end
	},
	UpdateCharacterState = {
		On = function(Listener: (Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }) -> ()): () -> ()
			Events.Unreliable[0] = Listener
			return function (): ()
				if Events.Unreliable[0] == Listener then
					Events.Unreliable[0] = nil
				end
			end
		end
	},
	ClientInputEvent = {
		Fire = function(Value: { KeyCode: string, UserInputType: string, IsPressed: boolean }): ()
			WriteEVENT_ClientInputEvent(Value)
		end
	},
	SetTarget = {
		Fire = function(Value: Model?): ()
			WriteEVENT_SetTarget(Value)
		end
	},
	RequestAbilityCast = {
		Fire = function(Value: { AbilityId: number, Target: Model?, Position: Vector3 }): ()
			WriteEVENT_RequestAbilityCast(Value)
		end
	},
	StateSync = {
		On = function(Listener: (Value: { States: {[string]: any} }) -> ()): () -> ()
			Events.Unreliable[1] = Listener
			return function (): ()
				if Events.Unreliable[1] == Listener then
					Events.Unreliable[1] = nil
				end
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL