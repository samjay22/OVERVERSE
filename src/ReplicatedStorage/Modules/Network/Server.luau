--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

-- OPTIMIZED: More efficient buffer allocation with better growth strategy
local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        -- OPTIMIZED: Use power-of-2 growth for better memory alignment
        local newSize = SendSize
        while InUse > newSize do
            newSize = newSize * 2 -- Power of 2 growth instead of 1.5x
        end

        -- OPTIMIZED: Only create new buffer if significantly larger
        if newSize > SendSize * 1.25 then -- 25% threshold
            local Buffer = buffer.create(newSize)
            buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
            SendBuffer = Buffer
            SendSize = newSize
        end
    end

    SendOffset = SendCursor
    SendCursor += Bytes

    return SendOffset
end

-- OPTIMIZED: Buffer-based queue for better performance
local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil,
        _bufferPool = {}, -- Pool of reusable buffers
        _poolSize = 0,
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next

    -- Return buffer to pool if it's a buffer value
    if typeof(head.value) == "buffer" and queue._poolSize < 16 then
        queue._bufferPool[queue._poolSize + 1] = head.value
        queue._poolSize += 1
    end

    return head.value
end

-- OPTIMIZED: Get pooled buffer for queue operations
local function GetPooledBuffer(queue: Queue, size: number): buffer
    if queue._poolSize > 0 then
        local buf = queue._bufferPool[queue._poolSize]
        queue._bufferPool[queue._poolSize] = nil
        queue._poolSize -= 1

        if buffer.len(buf) >= size then
            return buf
        end
    end

    return buffer.create(size)
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[4] = table.create(256)
Queue.Reliable[5] = table.create(256)
Queue.Reliable[6] = table.create(256)
Queue.Unreliable[2] = table.create(256)
local function WriteEVENT_SetCharacter(Value: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function WriteEVENT_CastAbility(Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }): ()
	-- Allocate BLOCK: 29 bytes
	local BLOCK_START = Allocate(29)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Length = #Value.AbilityName
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.AbilityName, Length)
	local Length = #Value.CharacterName
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.CharacterName, Length)
	table.insert(SendInstances, Value.PlayerCaster or Null)
	local Vector = Value.Direction
	buffer.writef32(SendBuffer, BLOCK_START + 5, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 9, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 13, Vector.Z)
	local Vector = Value.Position
	buffer.writef32(SendBuffer, BLOCK_START + 17, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 21, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 25, Vector.Z)
end

local function WriteEVENT_StartCharacterAnimation(Value: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	local Length = #Value
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value, Length)
end

local function WriteEVENT_TargetChanged(Value: Model?): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	table.insert(SendInstances, Value or Null)
end

local function WriteEVENT_UpdateCharacterState(Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }): ()
	-- Allocate BLOCK: 7 bytes
	local BLOCK_START = Allocate(7)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Length = #Value.CharacterName
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value.CharacterName, Length)
	buffer.writeu8(SendBuffer, BLOCK_START + 3, Value.Health)
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value.Mana)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value.Position ~= nil and 1 or 0)
	if Value.Position ~= nil then
		-- Allocate BLOCK: 12 bytes
		local BLOCK_START = Allocate(12)
		local Vector = Value.Position
		buffer.writef32(SendBuffer, BLOCK_START + 0, Vector.X)
		buffer.writef32(SendBuffer, BLOCK_START + 4, Vector.Y)
		buffer.writef32(SendBuffer, BLOCK_START + 8, Vector.Z)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 6, Value.IsAlive and 1 or 0)
end

local function ReadEVENT_ClientInputEvent(): ({ KeyCode: string, UserInputType: string, IsPressed: boolean })
	-- Read BLOCK: 5 bytes
	local BLOCK_START = Read(5)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.KeyCode = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	Value.UserInputType = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.IsPressed = (buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1)
	return Value
end

local function ReadEVENT_SetTarget(): (Model?)
	local Value
	RecieveInstanceCursor += 1
	if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
		RecieveInstanceCursor -= 1
		RecieveInstanceCursor += 1
		Value = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value) ~= "Instance" then error(`Expected an Instance, got {typeof(Value)} instead.`) end
		if not Value:IsA("Model") then error(`Expected an Instance of type "Model", got "{Value.ClassName}" instead.`) end
	end
	return Value
end

local function ReadEVENT_RequestAbilityCast(): ({ AbilityId: number, Target: Model?, Position: Vector3 })
	-- Read BLOCK: 14 bytes
	local BLOCK_START = Read(14)
	local Value = {} :: any
	Value.AbilityId = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	RecieveInstanceCursor += 1
	if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
		RecieveInstanceCursor -= 1
		RecieveInstanceCursor += 1
		Value.Target = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value.Target) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Target)} instead.`) end
		if not Value.Target:IsA("Model") then error(`Expected an Instance of type "Model", got "{Value.Target.ClassName}" instead.`) end
	end
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 2)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 6)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 10)
	Value.Position = Vector3.new(X, Y, Z)
	return Value
end

local function WriteEVENT_StateSync(Value: { States: {[string]: any} }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	local Elements_1 = 0
	for Key_1, Element_1 in Value.States do
		Elements_1 += 1
		local Length = #Key_1
		local OFFSET_0 = Allocate(2)
		buffer.writeu16(SendBuffer, OFFSET_0, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Key_1, Length)
		table.insert(SendInstances, if Element_1 == nil then Null else Element_1)
	end
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Elements_1)
end

local function ReadEVENT_UpdateMouse(): ({ MouseHit: Vector3, MouseUnit: Vector3, Origin: Vector3, MouseScreenPosition: Vector3 })
	-- Read BLOCK: 48 bytes
	local BLOCK_START = Read(48)
	local Value = {} :: any
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	Value.MouseHit = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	Value.MouseUnit = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 24)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 28)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 32)
	Value.Origin = Vector3.new(X, Y, Z)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 36)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 40)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 44)
	Value.MouseScreenPosition = Vector3.new(X, Y, Z)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	SetCharacter = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	CastAbility = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	StartCharacterAnimation = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	TargetChanged = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	UpdateCharacterState = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	ClientInputEvent = {
		On = NOOP
	},
	SetTarget = {
		On = NOOP
	},
	RequestAbilityCast = {
		On = NOOP
	},
	StateSync = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	UpdateMouse = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 4 then
			local Value: { KeyCode: string, UserInputType: string, IsPressed: boolean } = ReadEVENT_ClientInputEvent()
			if Events.Reliable[4] ~= nil then
				task.spawn(Events.Reliable[4], Player, Value)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"ClientInputEvent\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Player, Value} :: {any})
			end
		elseif Index == 5 then
			local Value: Model? = ReadEVENT_SetTarget()
			if Events.Reliable[5] ~= nil then
				Events.Reliable[5](Player, Value)
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"SetTarget\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Player, Value} :: {any})
			end
		elseif Index == 6 then
			local Value: { AbilityId: number, Target: Model?, Position: Vector3 } = ReadEVENT_RequestAbilityCast()
			if Events.Reliable[6] ~= nil then
				task.spawn(Events.Reliable[6], Player, Value)
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"RequestAbilityCast\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Player, Value} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 2 then
			local Value: { MouseHit: Vector3, MouseUnit: Vector3, Origin: Vector3, MouseScreenPosition: Vector3 } = ReadEVENT_UpdateMouse()
			if Events.Unreliable[2] ~= nil then
				task.spawn(Events.Unreliable[2], Player, Value)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	SetCharacter = {
		Fire = function(Player: Player, Value: string): ()
			Load(PlayersMap[Player])
			WriteEVENT_SetCharacter(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: string): ()
			Load()
			WriteEVENT_SetCharacter(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: string): ()
			Load()
			WriteEVENT_SetCharacter(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: string): ()
			Load()
			WriteEVENT_SetCharacter(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	CastAbility = {
		Fire = function(Player: Player, Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }): ()
			Load(PlayersMap[Player])
			WriteEVENT_CastAbility(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }): ()
			Load()
			WriteEVENT_CastAbility(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }): ()
			Load()
			WriteEVENT_CastAbility(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: { AbilityName: string, CharacterName: string, PlayerCaster: Player, Direction: Vector3, Position: Vector3 }): ()
			Load()
			WriteEVENT_CastAbility(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	StartCharacterAnimation = {
		Fire = function(Player: Player, Value: string): ()
			Load(PlayersMap[Player])
			WriteEVENT_StartCharacterAnimation(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: string): ()
			Load()
			WriteEVENT_StartCharacterAnimation(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: string): ()
			Load()
			WriteEVENT_StartCharacterAnimation(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: string): ()
			Load()
			WriteEVENT_StartCharacterAnimation(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	TargetChanged = {
		Fire = function(Player: Player, Value: Model?): ()
			Load(PlayersMap[Player])
			WriteEVENT_TargetChanged(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: Model?): ()
			Load()
			WriteEVENT_TargetChanged(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: Model?): ()
			Load()
			WriteEVENT_TargetChanged(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: Model?): ()
			Load()
			WriteEVENT_TargetChanged(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	UpdateCharacterState = {
		Fire = function(Player: Player, Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }): ()
			Load()
			WriteEVENT_UpdateCharacterState(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireClient(Player, Buffer, SendInstances)
		end,
		FireAll = function(Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }): ()
			Load()
			WriteEVENT_UpdateCharacterState(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireAllClients(Buffer, SendInstances)
		end,
		FireList = function(List: {Player}, Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }): ()
			Load()
			WriteEVENT_UpdateCharacterState(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in List do
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
		FireExcept = function(Except: Player, Value: { CharacterName: string, Health: number, Mana: number, Position: Vector3?, IsAlive: boolean }): ()
			Load()
			WriteEVENT_UpdateCharacterState(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
	},
	ClientInputEvent = {
		On = function(Listener: (Player: Player, Value: { KeyCode: string, UserInputType: string, IsPressed: boolean }) -> ()): () -> ()
			Events.Reliable[4] = Listener
			for Index, Arguments in Queue.Reliable[4] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[4] = {}
			return function (): ()
				if Events.Reliable[4] == Listener then
					Events.Reliable[4] = nil
				end
			end
		end
	},
	SetTarget = {
		On = function(Listener: (Player: Player, Value: Model?) -> ()): () -> ()
			Events.Reliable[5] = Listener
			for Index, Arguments in Queue.Reliable[5] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[5] = {}
			return function (): ()
				if Events.Reliable[5] == Listener then
					Events.Reliable[5] = nil
				end
			end
		end
	},
	RequestAbilityCast = {
		On = function(Listener: (Player: Player, Value: { AbilityId: number, Target: Model?, Position: Vector3 }) -> ()): () -> ()
			Events.Reliable[6] = Listener
			for Index, Arguments in Queue.Reliable[6] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[6] = {}
			return function (): ()
				if Events.Reliable[6] == Listener then
					Events.Reliable[6] = nil
				end
			end
		end
	},
	StateSync = {
		Fire = function(Player: Player, Value: { States: {[string]: any} }): ()
			Load()
			WriteEVENT_StateSync(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireClient(Player, Buffer, SendInstances)
		end,
		FireAll = function(Value: { States: {[string]: any} }): ()
			Load()
			WriteEVENT_StateSync(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireAllClients(Buffer, SendInstances)
		end,
		FireList = function(List: {Player}, Value: { States: {[string]: any} }): ()
			Load()
			WriteEVENT_StateSync(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in List do
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
		FireExcept = function(Except: Player, Value: { States: {[string]: any} }): ()
			Load()
			WriteEVENT_StateSync(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end
		end,
	},
	UpdateMouse = {
		On = function(Listener: (Player: Player, Value: { MouseHit: Vector3, MouseUnit: Vector3, Origin: Vector3, MouseScreenPosition: Vector3 }) -> ()): () -> ()
			Events.Unreliable[2] = Listener
			return function (): ()
				if Events.Unreliable[2] == Listener then
					Events.Unreliable[2] = nil
				end
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL